{"ast":null,"code":"import { useState, useEffect, useCallback } from 'react';\nimport { API_URL, API_KEY } from '../../config';\nexport const useMovieFetch = movieId => {\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const fetchData = useCallback(async () => {\n    setError(false);\n    setLoading(true);\n\n    try {\n      const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n      const result = await (await fetch(endpoint)).json();\n      const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n      const creditsResult = await (await fetch(creditsEndpoint)).json();\n      const directors = creditsResult.crew.filter(member => member.job === 'Director');\n      setState({ ...result,\n        actors: creditsResult.cast,\n        directors\n      });\n    } catch (error) {\n      setError(true);\n    }\n\n    setLoading(false);\n  }, [movieId]);\n  useEffect(() => {\n    if (localStorage[movieId]) {\n      setState(JSON.parse(localStorage[movieId]));\n      setLoading(false);\n    } else {\n      fetchData();\n    }\n  }, [fetchData, movieId]);\n  useEffect(() => {\n    localStorage.setItem(movieId, JSON.stringify(state));\n  }, [movieId, state]);\n  return [state, loading, error];\n};","map":{"version":3,"sources":["/Users/dcash/Desktop/react_portfolio/react-rmdb-starterFiles_rev1/React_MDB_App_Portfolio_Example/src/components/hooks/useMovieFetch.js"],"names":["useState","useEffect","useCallback","API_URL","API_KEY","useMovieFetch","movieId","state","setState","loading","setLoading","error","setError","fetchData","endpoint","result","fetch","json","creditsEndpoint","creditsResult","directors","crew","filter","member","job","actors","cast","localStorage","JSON","parse","setItem","stringify"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,cAAjC;AAEA,OAAO,MAAMC,aAAa,GAAGC,OAAO,IAAI;AACtC,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBR,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,KAAD,CAAlC;AAEA,QAAMa,SAAS,GAAGX,WAAW,CAAC,YAAY;AACxCU,IAAAA,QAAQ,CAAE,KAAF,CAAR;AACAF,IAAAA,UAAU,CAAE,IAAF,CAAV;;AAEA,QAAI;AACF,YAAMI,QAAQ,GAAI,GAAEX,OAAQ,SAAQG,OAAQ,YAAWF,OAAQ,EAA/D;AACA,YAAMW,MAAM,GAAG,MAAM,CAAC,MAAMC,KAAK,CAACF,QAAD,CAAZ,EAAwBG,IAAxB,EAArB;AACA,YAAMC,eAAe,GAAI,GAAEf,OAAQ,SAAQG,OAAQ,oBAAmBF,OAAQ,EAA9E;AACA,YAAMe,aAAa,GAAG,MAAM,CAAC,MAAMH,KAAK,CAACE,eAAD,CAAZ,EAA+BD,IAA/B,EAA5B;AACA,YAAMG,SAAS,GAAGD,aAAa,CAACE,IAAd,CAAmBC,MAAnB,CAChBC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAe,UADT,CAAlB;AAIAhB,MAAAA,QAAQ,CAAC,EACP,GAAGO,MADI;AAEPU,QAAAA,MAAM,EAAEN,aAAa,CAACO,IAFf;AAGPN,QAAAA;AAHO,OAAD,CAAR;AAMD,KAfD,CAeE,OAAOT,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AACDF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAvB4B,EAuB1B,CAACJ,OAAD,CAvB0B,CAA7B;AAyBAL,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAI0B,YAAY,CAACrB,OAAD,CAAhB,EAA2B;AACzBE,MAAAA,QAAQ,CAACoB,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACrB,OAAD,CAAvB,CAAD,CAAR;AACII,MAAAA,UAAU,CAAC,KAAD,CAAV;AAEL,KAJD,MAIO;AACLG,MAAAA,SAAS;AACV;AACF,GARQ,EAQN,CAACA,SAAD,EAAYP,OAAZ,CARM,CAAT;AAWAL,EAAAA,SAAS,CAAC,MAAK;AACb0B,IAAAA,YAAY,CAACG,OAAb,CAAqBxB,OAArB,EAA8BsB,IAAI,CAACG,SAAL,CAAexB,KAAf,CAA9B;AACD,GAFQ,EAEN,CAACD,OAAD,EAAUC,KAAV,CAFM,CAAT;AAIA,SAAO,CAACA,KAAD,EAAOE,OAAP,EAAgBE,KAAhB,CAAP;AACD,CA9CM","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { API_URL, API_KEY } from '../../config';\n\nexport const useMovieFetch = movieId => {\n  const [state,setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  const fetchData = useCallback(async () => {\n    setError (false);\n    setLoading (true);\n\n    try {\n      const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n      const result = await (await fetch(endpoint)).json();\n      const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n      const creditsResult = await (await fetch(creditsEndpoint)).json();\n      const directors = creditsResult.crew.filter(\n        member => member.job === 'Director'\n      );\n\n      setState({\n        ...result,\n        actors: creditsResult.cast,\n        directors,\n      })\n\n    } catch (error) {\n      setError(true);\n    }\n    setLoading(false);\n  }, [movieId])\n\n  useEffect(()=>{\n    if (localStorage[movieId]) {\n      setState(JSON.parse(localStorage[movieId]));\n          setLoading(false);\n\n    } else {\n      fetchData();\n    }\n  }, [fetchData, movieId]);\n\n\n  useEffect(() =>{\n    localStorage.setItem(movieId, JSON.stringify(state));\n  }, [movieId, state]);\n\n  return [state,loading, error];\n}\n"]},"metadata":{},"sourceType":"module"}